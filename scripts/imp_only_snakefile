from datetime import date

# === Date for the output plots ===
today = date.today().strftime("%Y-%m-%d")
print("\nToday's date:", today)

# === Directories ===
project_dir = <parent-directory> + "/PRS_pipeline_binary_phenotypes/"
plink_output_dir = "output_data/001_plink/"
prsice_output_dir = "output_data/002_prsice/"
lasso_output_dir = "output_data/003_lassosum/"
comparison_output_dir = "output_data/005_comparison/"


# === Prefix of the files  ===
TARGET_file = "IBD_GSA_fin_maf"
EXTERNAL_file = "1000G_EUR_fin_maf"
GWAS_file = "GWAS_summary_stats.txt"
PHENO_file = "final_phenotypes.txt"

# === Parameters for tools ===
pval_thresholds = "5e-8,1e-5,0.01,0.05,0.1,0.5"
lasso_thresholding_values = "0.2,0.5,0.9,1"
genome_build = "EUR.hg38"
noneffect_allele = "Allele1"
effect_allele = "Allele2"
chromosome_col = "CHR"
pos_col = "pos_hg38"
beta_col = "Effect"
p_value_col = "P.value"
snp_col = "SNP_hg38"
maf_value = "0.01"
info_value = "0.8"
binary_pheno = "T"

rule all:
	input:
		clumped = project_dir + plink_output_dir + "target_data/" + TARGET_file + ".clumped",
		clumped_ex = project_dir + plink_output_dir + "external_data/" + EXTERNAL_file + ".clumped",
		snp =  project_dir + plink_output_dir + "target_data/" + TARGET_file + ".valid.snp",
		snp_ex =  project_dir + plink_output_dir + "external_data/" + EXTERNAL_file + ".valid.snp",
		pvalue = project_dir + plink_output_dir + "target_data/SNP.pvalue",
		pvalue_ex =  project_dir + plink_output_dir + "external_data/SNP.pvalue",
		range_file =  project_dir + plink_output_dir + "target_data/range_list",
		range_file_ex = project_dir + plink_output_dir + "external_data/range_list",
		new_stats =  project_dir + plink_output_dir + "target_data/condensed.GWAS.stats",
		new_stats_ex =  project_dir + plink_output_dir + "external_data/condensed.GWAS.stats",
		
		plink_status =  project_dir  + plink_output_dir + "target_data/plink_status.txt",
		plink_status_ext =  project_dir  + plink_output_dir + "external_data/plink_status_ex.txt",

		snp_list = project_dir + prsice_output_dir + "target_data/" + TARGET_file + ".snp",
		all_score_target = project_dir + prsice_output_dir + "target_data/" + TARGET_file + ".all_score",
		all_score_external = project_dir + prsice_output_dir + "external_data/" + EXTERNAL_file + ".all_score",
		
		prsice_status =  project_dir  + prsice_output_dir + "target_data/prsice_status.txt",
		prsice_status_ex =  project_dir  + prsice_output_dir + "external_data/prsice_status_ex.txt",

		valid_plot = project_dir + lasso_output_dir + "target_data/" + TARGET_file + "_validation_plot.pdf",
		prs_lasso1_ext = project_dir + lasso_output_dir + "external_data/" + EXTERNAL_file + "_prs_lasso1_external.txt", 
		prs_lasso2_ext = project_dir + lasso_output_dir + "external_data/" + EXTERNAL_file + "_prs_lasso2_external.txt", 
		prs_lasso3_ext = project_dir + lasso_output_dir + "external_data/" + EXTERNAL_file + "_prs_lasso3_external.txt", 
		prs_lasso4_ext = project_dir + lasso_output_dir + "external_data/" + EXTERNAL_file + "_prs_lasso4_external.txt",

		lasso_status =  project_dir  + lasso_output_dir + "target_data/lasso_status.txt",
		lasso_status_ex =  project_dir  + lasso_output_dir + "external_data/lasso_status_ex.txt",	
	
		plink_prs = project_dir + comparison_output_dir + "best_prs_plink.txt",
		prsice_prs = project_dir + comparison_output_dir + "best_prs_prsice.txt",
		lasso_prs = project_dir + comparison_output_dir + "best_prs_lassosum.txt",

		best_prs = project_dir + comparison_output_dir + "best_prs_all.txt",
		best_thr = project_dir + comparison_output_dir + "best_thr_all.txt",

		boxplot = project_dir + comparison_output_dir + "boxplot.pdf",
		rocplot = project_dir + comparison_output_dir + "ROC_plot.pdf",
		auc_plot = project_dir + comparison_output_dir + "AUC_plot.pdf",
		auc_file = project_dir + comparison_output_dir + "performance_metrics_auc.txt",
		rsqr_plot = project_dir + comparison_output_dir + "Rsqr_plot.pdf",
		rsqr_file = project_dir + comparison_output_dir + "performance_metrics_rsqr.txt",

rule clump:
	input:
		sum_stats = project_dir + "data/" + GWAS_file, 
	params:
		b_files = project_dir + "data/" + TARGET_file,
		output_prefix = project_dir + plink_output_dir + "target_data/" + TARGET_file,
		snps = snp_col,
		pval = p_value_col,
	output: 
		clumped = project_dir + plink_output_dir + "target_data/" + TARGET_file + ".clumped",
	shell:
		'''
		plink \
			--bfile {params.b_files} \
			--clump-p1 1 \
			--clump-r2 0.1 \
			--clump-kb 250 \
			--clump {input.sum_stats} \
			--clump-snp-field {params.snps} \
			--clump-field {params.pval} \
			--allow-no-sex \
			--out {params.output_prefix}
		'''

rule clump_external:
	input:
		sum_stats = project_dir + "data/" + GWAS_file, 
	params:
		b_files = project_dir + "data/" + EXTERNAL_file,
		output_prefix = project_dir + plink_output_dir + "external_data/" + EXTERNAL_file,
		snps = snp_col,
		pval = p_value_col,
	output: 
		clumped_ex = project_dir + plink_output_dir + "external_data/" + EXTERNAL_file + ".clumped",
	shell:
		'''
		plink \
			--bfile {params.b_files} \
			--clump-p1 1 \
			--clump-r2 0.1 \
			--clump-kb 250 \
			--clump {input.sum_stats} \
			--clump-snp-field {params.snps} \
			--clump-field {params.pval} \
			--allow-no-sex \
			--out {params.output_prefix}
		'''

rule extract_index:
	input:
		clump = project_dir + plink_output_dir + "target_data/" + TARGET_file + ".clumped", 
	output: 
		snp =  project_dir + plink_output_dir + "target_data/" + TARGET_file + ".valid.snp",
	shell:
		'''
		awk 'NR!=1{{print $3}}' {input.clump} >  {output.snp}
		'''

rule extract_index_external:
	input:
		clumped_ex = project_dir + plink_output_dir + "external_data/" + EXTERNAL_file + ".clumped", 
	output: 
		snp_ex =  project_dir + plink_output_dir + "external_data/" + EXTERNAL_file + ".valid.snp",
	shell:
		'''
		awk 'NR!=1{{print $3}}' {input.clumped_ex} >  {output.snp_ex}
		'''

rule snp_pvalue:
	input:
		sum_stats = project_dir + "data/" + GWAS_file, 
	params:
		p_val = p_value_col,
		snp = snp_col 
	output: 
		pvalue =  project_dir + plink_output_dir + "target_data/SNP.pvalue",
	shell:
		'''
		awk 'NR==1 {{for (i=1; i<=NF; i++) {{f[$i] = i}}}}{{ print $(f["{params.snp}"]), $(f["{params.p_val}"]) }}' {input.sum_stats} > {output.pvalue}
		'''

rule snp_pvalue_external:
	input:
		sum_stats = project_dir + "data/" + GWAS_file, 
	params:
		p_val = p_value_col,
		snp = snp_col 
	output: 
		pvalue_ex =  project_dir + plink_output_dir + "external_data/SNP.pvalue",
	shell:
		'''
		awk 'NR==1 {{for (i=1; i<=NF; i++) {{f[$i] = i}}}}{{ print $(f["{params.snp}"]), $(f["{params.p_val}"]) }}' {input.sum_stats} > {output.pvalue_ex}
		'''

rule range_file:
	params:
		ranges = pval_thresholds,
	conda:
		project_dir + "conda_env/ibp_2022_r_env.yml"
	output:
		range_file =  project_dir + plink_output_dir + "target_data/range_list",
	script:
		"range_parser.R"

rule range_file_ex:
	params:
		ranges = pval_thresholds,
	conda:
		project_dir + "conda_env/ibp_2022_r_env.yml"
	output:
		range_file_ex =  project_dir + plink_output_dir + "external_data/range_list",
	script:
		"range_parser.R"        

rule plink_score_file:
	input:
		sum_stats = project_dir + "data/" + GWAS_file, 
	params:
		allele = effect_allele,
		snp = snp_col, 
		effect = beta_col,
	output:
		new_stats =  project_dir + plink_output_dir + "target_data/condensed.GWAS.stats",
	shell:
		'''
		awk 'NR==1 {{for (i=1; i<=NF; i++) {{f[$i] = i}}}}{{ print $(f["{params.snp}"]), $(f["{params.allele}"]), $(f["{params.effect}"]) }}' {input.sum_stats} > {output.new_stats}
		'''

rule plink_score_file_ex:
	input:
		sum_stats = project_dir + "data/" + GWAS_file, 
	params:
		allele = effect_allele,
		snp = snp_col, 
		effect = beta_col,
	output: 
		new_stats_ex =  project_dir + plink_output_dir + "external_data/condensed.GWAS.stats",
	shell:
		'''
		awk 'NR==1 {{for (i=1; i<=NF; i++) {{f[$i] = i}}}}{{ print $(f["{params.snp}"]), $(f["{params.allele}"]), $(f["{params.effect}"]) }}' {input.sum_stats} > {output.new_stats_ex}
		'''

rule plink_score:
	input:
		short_stats = project_dir + plink_output_dir + "target_data/condensed.GWAS.stats",
		snp_pval = project_dir + plink_output_dir + "target_data/SNP.pvalue",
		valid_snps =  project_dir + plink_output_dir + "target_data/" + TARGET_file + ".valid.snp",
		range = project_dir + plink_output_dir + "target_data/range_list",
	params:
		bfile = project_dir + plink_output_dir + "target_data/" +  TARGET_file,
		bfile_dir = project_dir + "data/" + TARGET_file
	output: 
		plink_status =  project_dir  + plink_output_dir + "target_data/plink_status.txt",
	shell:
		'''
		plink \
			--bfile {params.bfile_dir} \
			--score {input.short_stats} header \
			--q-score-range {input.range} {input.snp_pval} header \
			--extract {input.valid_snps} \
			--allow-no-sex \
			--out {params.bfile}
		echo "prs generation complete" > {output.plink_status}
		'''   

rule plink_score_ex:
	input:
		short_stats = project_dir + plink_output_dir + "external_data/condensed.GWAS.stats",
		snp_pval = project_dir + plink_output_dir + "external_data/SNP.pvalue",
		valid_snps =  project_dir + plink_output_dir + "external_data/" + EXTERNAL_file + ".valid.snp",
		range = project_dir + plink_output_dir + "external_data/range_list",
	params:
		bfile = project_dir + plink_output_dir + "external_data/" +  EXTERNAL_file,
		bfile_dir = project_dir + "data/" + EXTERNAL_file
	output: 
		plink_status =  project_dir  + plink_output_dir + "external_data/plink_status_ex.txt",
	shell:
		'''
		plink \
			--bfile {params.bfile_dir} \
			--score {input.short_stats} header \
			--q-score-range {input.range} {input.snp_pval} header \
			--extract {input.valid_snps} \
			--allow-no-sex \
			--out {params.bfile}
		echo "prs generation complete" > {output.plink_status}
		'''  

rule covariates:
	input:
		cov = project_dir + "data/" + TARGET_file + ".cov",
		eigenvec = project_dir + "data/" + TARGET_file + ".eigenvec",
	params:
		b_files = project_dir + "data/" + TARGET_file,
	output:
		covariates = project_dir + "data/" + TARGET_file + ".covariate",
	script:
		"covariates.R"

rule prsice_target:
	input:
		sum_stats = project_dir + "data/" + GWAS_file, 
		phenos = project_dir + "data/" + PHENO_file, 
		covariates = project_dir + "data/" + TARGET_file + ".covariate",
	params:
		prsice_R = project_dir + "prsice/PRSice.R",
		prsice_linux = project_dir + "prsice/PRSice_linux",
		b_files = project_dir + "data/" + TARGET_file,
		output_prefix = project_dir + prsice_output_dir + "target_data/" + TARGET_file,
		snps = snp_col,
		noneff_allele = noneffect_allele,
		eff_allele = effect_allele,
		chromo = chromosome_col,
		pos = pos_col,
		beta = beta_col,
		pval = p_value_col,
		maf = maf_value,
		info = info_value,
		thresholds = pval_thresholds,
		binary = binary_pheno,
	output:
		snp_list = project_dir + prsice_output_dir + "target_data/" + TARGET_file + ".snp",
		prsice = project_dir + prsice_output_dir + "target_data/" + TARGET_file + ".prsice",
		all_score_target = project_dir + prsice_output_dir + "target_data/" + TARGET_file + ".all_score",
	shell:
		'''
		Rscript {params.prsice_R} \
			--prsice {params.prsice_linux} \
			--base {input.sum_stats} \
			--target {params.b_files} \
			--pheno {input.phenos} \
			--cov {input.covariates} \
			--binary-target {params.binary} \
			--ignore-fid \
			--base-maf MAF:{params.maf} \
			--base-info INFO:{params.info} \
			--snp {params.snps} \
			--chr {params.chromo} \
			--bp {params.pos} \
			--A1 {params.eff_allele} \
			--A2 {params.noneff_allele} \
			--stat {params.beta} \
			--beta \
			--pvalue {params.pval} \
			--clump-kb 250 \
			--clump-p 1.000000 \
			--clump-r2 0.100000 \
			--bar-levels {params.thresholds} \
			--fastscore \
			--no-regress \
			--all-score \
			--print-snp \
			--out {params.output_prefix}
		'''

rule prsice_external:
	input:
		sum_stats = project_dir + "data/" + GWAS_file, 
		phenos = project_dir + "data/" + PHENO_file, 
		covariates = project_dir + "data/" + TARGET_file + ".covariate",
		snp_list = project_dir + prsice_output_dir + "target_data/" + TARGET_file + ".snp",
	params:
		prsice_R = project_dir + "prsice/PRSice.R",
		prsice_linux = project_dir + "prsice/PRSice_linux",
		b_files = project_dir + "data/" + EXTERNAL_file,
		output_prefix = project_dir + prsice_output_dir + "external_data/" + EXTERNAL_file,
		snps = snp_col,
		noneff_allele = noneffect_allele,
		eff_allele = effect_allele,
		chromo = chromosome_col,
		pos = pos_col,
		beta = beta_col,
		pval = p_value_col,
		maf = maf_value,
		info = info_value,
		thresholds = pval_thresholds,
		binary = binary_pheno
	output:
		all_score_external = project_dir + prsice_output_dir + "external_data/" + EXTERNAL_file + ".all_score",
	shell:
		'''
		Rscript {params.prsice_R} \
			--prsice {params.prsice_linux} \
			--base {input.sum_stats} \
			--target {params.b_files} \
			--pheno {input.phenos} \
			--cov {input.covariates} \
			--binary-target {params.binary} \
			--ignore-fid \
			--base-maf MAF:{params.maf}\
			--base-info INFO:{params.info} \
			--snp {params.snps} \
			--chr {params.chromo} \
			--bp {params.pos} \
			--A1 {params.eff_allele} \
			--A2 {params.noneff_allele} \
			--stat {params.beta} \
			--beta \
			--pvalue {params.pval} \
			--bar-levels {params.thresholds} \
			--fastscore \
			--no-regress \
			--all-score \
			--extract {input.snp_list} \
			--no-clump \
			--out {params.output_prefix}
		'''

rule prsice_status:
	input:
		all_score = project_dir + prsice_output_dir + "target_data/" + TARGET_file + ".all_score",
	output:
		prsice_status = project_dir + prsice_output_dir + "target_data/prsice_status.txt",
	shell:
		'''
		echo "PRsice target finished" > {output.prsice_status}
		'''

rule prsice_status_ext:
	input:
		all_score = project_dir + prsice_output_dir + "external_data/" + EXTERNAL_file + ".all_score",
	output:
		prsice_status = project_dir + prsice_output_dir + "external_data/prsice_status_ex.txt",
	shell:
		'''
		echo "PRsice external finished" > {output.prsice_status}
		'''

rule lasso_target:
	input:
		sum_stats = project_dir + "data/" + GWAS_file, 
		covar =  project_dir + "data/" + TARGET_file + ".cov",
		pcs = project_dir + "data/" + TARGET_file + ".eigenvec",
		phenos = project_dir + "data/" + PHENO_file, 
	params:
		b_files = project_dir + "data/" + TARGET_file,
		thresholds = lasso_thresholding_values,
		ref_genome = genome_build,
		noneff_allele = noneffect_allele,
		eff_allele = effect_allele,
		chr = chromosome_col,
		pos = pos_col,
		beta = beta_col,
		p_value = p_value_col,
	conda:
		project_dir + "conda_env/lasso_sum.yml"
	output:
		valid_plot = project_dir + lasso_output_dir + "target_data/" + TARGET_file + "_validation_plot.pdf",
		top_s = project_dir + lasso_output_dir + "target_data/" + TARGET_file + "_best_s_val.txt", 
		top_lambda = project_dir + lasso_output_dir + "target_data/" + TARGET_file + "_best_lambda_val.txt",
		prs_res = project_dir + lasso_output_dir + "target_data/" + TARGET_file + "_prs_results.txt", 
		valid_table = project_dir + lasso_output_dir + "target_data/" + TARGET_file + "_validation_table.txt",
		ranked_table = project_dir + lasso_output_dir + "target_data/" + TARGET_file + "_validation_table_ranked.txt",        
		prs_lasso1 = project_dir + lasso_output_dir + "target_data/" + TARGET_file + "_prs_lasso1.txt", 
		prs_lasso2 = project_dir + lasso_output_dir + "target_data/" + TARGET_file + "_prs_lasso2.txt", 
		prs_lasso3 = project_dir + lasso_output_dir + "target_data/" + TARGET_file + "_prs_lasso3.txt", 
		prs_lasso4 = project_dir + lasso_output_dir + "target_data/" + TARGET_file + "_prs_lasso4.txt", 
		r_sqrd = project_dir + lasso_output_dir + "target_data/" + TARGET_file + "_max_r_sqr.txt",
	script:
		"LassoSumTarget.R"

rule lasso_external:
	input:
		sum_stats = project_dir + "data/" + GWAS_file, 
		valid_tab_ranked = project_dir + lasso_output_dir + "target_data/" + TARGET_file + "_validation_table_ranked.txt",
	params:
		b_files = project_dir + "data/" + EXTERNAL_file,
		thresholds = lasso_thresholding_values,
		ref_genome = genome_build,
		noneff_allele = noneffect_allele,
		eff_allele = effect_allele,
		chr = chromosome_col,
		pos = pos_col,
		beta = beta_col,
		p_value = p_value_col,
	conda:
		project_dir + "conda_env/lasso_sum.yml"
	output:        
		prs_lasso1_ext = project_dir + lasso_output_dir + "external_data/" + EXTERNAL_file + "_prs_lasso1_external.txt", 
		prs_lasso2_ext = project_dir + lasso_output_dir + "external_data/" + EXTERNAL_file + "_prs_lasso2_external.txt", 
		prs_lasso3_ext = project_dir + lasso_output_dir + "external_data/" + EXTERNAL_file + "_prs_lasso3_external.txt", 
		prs_lasso4_ext = project_dir + lasso_output_dir + "external_data/" + EXTERNAL_file + "_prs_lasso4_external.txt", 
	script:
		"LassoSumExternal.R"

rule lasso_status:
	input:
		prs_lasso1 = project_dir + lasso_output_dir + "target_data/" + TARGET_file + "_prs_lasso1.txt",
		prs_lasso2 = project_dir + lasso_output_dir + "target_data/" + TARGET_file + "_prs_lasso2.txt",
		prs_lasso3 = project_dir + lasso_output_dir + "target_data/" + TARGET_file + "_prs_lasso3.txt",
		prs_lasso4 = project_dir + lasso_output_dir + "target_data/" + TARGET_file + "_prs_lasso4.txt",
	output:
		lasso_status =  project_dir  + lasso_output_dir + "target_data/lasso_status.txt",
	shell:
		'''
		echo "lassosum target finished" > {output.lasso_status}
		'''

rule lasso_status_external:
	input:
		prs_lasso1_ext = project_dir + lasso_output_dir + "external_data/" + EXTERNAL_file + "_prs_lasso1_external.txt",
		prs_lasso2_ext = project_dir + lasso_output_dir + "external_data/" + EXTERNAL_file + "_prs_lasso2_external.txt",
		prs_lasso3_ext = project_dir + lasso_output_dir + "external_data/" + EXTERNAL_file + "_prs_lasso3_external.txt",
		prs_lasso4_ext = project_dir + lasso_output_dir + "external_data/" + EXTERNAL_file + "_prs_lasso4_external.txt",
	output:
		lasso_status =  project_dir  + lasso_output_dir + "external_data/lasso_status_ex.txt",
	shell:
		'''
		echo "lassosum target finished" > {output.lasso_status}
		'''

rule get_best_prs:
	input:
		range_file =  project_dir + plink_output_dir + "target_data/range_list",
		phenos = project_dir + "data/" + PHENO_file, 
		eigenvec = project_dir + "data/" + TARGET_file + ".eigenvec",
		plink_status =  project_dir  + plink_output_dir + "target_data/plink_status.txt",
		plink_status_ext =  project_dir  + plink_output_dir + "external_data/plink_status_ex.txt",
		prsice_status =  project_dir  + prsice_output_dir + "target_data/prsice_status.txt",
		prsice_status_ex =  project_dir  + prsice_output_dir + "external_data/prsice_status_ex.txt",
		lasso_status =  project_dir  + lasso_output_dir + "target_data/lasso_status.txt",
		lasso_status_ex =  project_dir  + lasso_output_dir + "external_data/lasso_status_ex.txt",
	params:
		project_dir = project_dir,
		plink_dir = plink_output_dir,
		prsice_dir = prsice_output_dir,
		lasso_dir = lasso_output_dir,
		target_prefix = TARGET_file,
		ext_prefix = EXTERNAL_file,
		pval_thresholds = pval_thresholds,
	conda:
		project_dir + "conda_env/ibp_2022_r_env.yml"
	output:
		plink_prs = project_dir + comparison_output_dir + "best_prs_plink.txt",
		prsice_prs = project_dir + comparison_output_dir + "best_prs_prsice.txt",
		lasso_prs = project_dir + comparison_output_dir + "best_prs_lassosum.txt",
		best_thr = project_dir + comparison_output_dir + "best_thr_all.txt",
	script:
		"imp_only_best_plots.R"


rule performance_metrics:
	input:
		plink_prs = project_dir + comparison_output_dir + "best_prs_plink.txt",
		prsice_prs = project_dir + comparison_output_dir + "best_prs_prsice.txt",
		lasso_prs = project_dir + comparison_output_dir + "best_prs_lassosum.txt",
	params:
		project_dir = project_dir,
		target_prefix = TARGET_file,
	conda:
		project_dir + "conda_env/ibp_2022_r_env.yml"
	output:
		best_prs = project_dir + comparison_output_dir + "best_prs_all.txt",
		boxplot = project_dir + comparison_output_dir + "boxplot.pdf",
		rocplot = project_dir + comparison_output_dir + "ROC_plot.pdf",
		auc_plot = project_dir + comparison_output_dir + "AUC_plot.pdf",
		auc_file = project_dir + comparison_output_dir + "performance_metrics_auc.txt",
		rsqr_plot = project_dir + comparison_output_dir + "Rsqr_plot.pdf",
		rsqr_file = project_dir + comparison_output_dir + "performance_metrics_rsqr.txt",
	script:
		"imp_only_performance_plots.R"
